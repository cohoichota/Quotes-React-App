{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","NewQuote","useHttp","addQuote","sendRequest","status","navigate","useNavigate","useEffect","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,iFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,wBC6C/BC,EA1CG,SAACL,GAChB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBAarB,OACG,cAAC,WAAD,UACG,cAAC,EAAD,UACG,uBAAMN,UAAWC,IAAQO,KAAMC,SAdxC,SAA2BC,GACxBA,EAAMC,iBAEN,IAAMC,EAAgBP,EAAeQ,QAAQC,MACvCC,EAAcR,EAAaM,QAAQC,MAIzCf,EAAMiB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAM1C,UACIhB,EAAMoB,WACJ,qBAAKnB,UAAWC,IAAQmB,QAAxB,SACG,cAACC,EAAA,EAAD,MAIN,sBAAKrB,UAAWC,IAAQqB,QAAxB,UACG,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKrB,OAEvC,sBAAKL,UAAWC,IAAQqB,QAAxB,UACG,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKnB,OAErC,qBAAKP,UAAWC,IAAQ2B,QAAxB,SACG,wBAAQ5B,UAAU,MAAlB,iC,eCfH6B,UAlBE,WACd,MAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAEfC,EAAWC,cAEjBC,qBAAU,WACQ,cAAXH,GACDC,EAAS,aAEZ,CAACD,EAAQC,IAMZ,OAAO,cAAC,EAAD,CAAWf,UAAsB,YAAXc,EAAsBjB,WAJ3B,SAACqB,GACtBL,EAAYK","file":"static/js/3.7a5003eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__340GE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3yJNl\",\"loading\":\"QuoteForm_loading__2fZTj\",\"control\":\"QuoteForm_control__AmFj4\",\"actions\":\"QuoteForm_actions__1UREp\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef } from 'react';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n   const authorInputRef = useRef();\n   const textInputRef = useRef();\n\n   function submitFormHandler(event) {\n      event.preventDefault();\n\n      const enteredAuthor = authorInputRef.current.value;\n      const enteredText = textInputRef.current.value;\n\n      // optional: Could validate here\n\n      props.onAddQuote({ author: enteredAuthor, text: enteredText });\n   }\n\n   return (\n      <Fragment>\n         <Card>\n            <form className={classes.form} onSubmit={submitFormHandler}>\n               {props.isLoading && (\n                  <div className={classes.loading}>\n                     <LoadingSpinner />\n                  </div>\n               )}\n\n               <div className={classes.control}>\n                  <label htmlFor=\"author\">Author</label>\n                  <input type=\"text\" id=\"author\" ref={authorInputRef} />\n               </div>\n               <div className={classes.control}>\n                  <label htmlFor=\"text\">Text</label>\n                  <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n               </div>\n               <div className={classes.actions}>\n                  <button className=\"btn\">Add Quote</button>\n               </div>\n            </form>\n         </Card>\n      </Fragment>\n   );\n};\n\nexport default QuoteForm;\n","import { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\nimport useHttp from '../hooks/use-http';\r\nimport { addQuote } from '../lib/api';\r\n\r\nconst NewQuote = () => {\r\n   const { sendRequest, status } = useHttp(addQuote);\r\n\r\n   const navigate = useNavigate();\r\n\r\n   useEffect(() => {\r\n      if (status === 'completed') {\r\n         navigate('/quotes');\r\n      }\r\n   }, [status, navigate]);\r\n\r\n   const addQuoteHandler = (quoteData) => {\r\n      sendRequest(quoteData);\r\n   };\r\n\r\n   return <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />;\r\n};\r\n\r\nexport default NewQuote;\r\n"],"sourceRoot":""}